# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  #config.vm.box = "centos/7"
  config.vm.define "entrada" do |entrada|
    entrada.vm.box = "centos/7"
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "forwarded_port", guest: 80, host: 80
  config.vm.network "forwarded_port", guest: 3306, host: 3306

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder "../../Sites", "/var/www/vhosts"
  config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.

  # Stage 1 - update CentOS
  config.vm.provision "shell", inline: <<-SHELL1
    echo "Provisioning your Entrada development machine."

    echo "Adding default hostnames to /etc/hosts..."

    echo "127.0.0.1 entrada.dev" >> /etc/hosts
    echo "127.0.0.1 entrada-1x-me.dev" >> /etc/hosts

    echo "Setting the virtual machine timezone..."

    mv /etc/localtime /etc/localtime.bak
    ln -s /usr/share/zoneinfo/America/Toronto /etc/localtime

    echo "Set SELINUX configuration"

    sed -i.bak -e 's/SELINUX=enforcing/SELINUX=permissive/g' /etc/selinux/config

    echo "Updating all of the CentOS packages. This may take some time..."

    # Updating the required packages on the VM.
    yum -y update
  SHELL1

  # Stage 2 - reboot
  config.vm.provision :reload

  # Stage 3 - Entrada requirements
  config.vm.provision "shell", inline: <<-SHELL2
    yum -y install https://centos7.iuscommunity.org/ius-release.rpm
    yum -y install httpd \
                openssl \
                mod_ssl \
                php56u \
                php56u-opcache \
                php56u-mcrypt \
                php56u-gd \
                php56u-devel \
                php56u-mysql \
                php56u-intl \
                php56u-mbstring \
                php56u-bcmath \
                php56u-ldap \
                php56u-imap \
                php56u-pspell \
                php56u-soap \
                php56u-xmlrpc \
                php56u-tidy \
                git \
                htmldoc \
                wkhtmltopdf \
                mariadb \
                mariadb-server \
                curl \
                ruby \
                rubygems \
                vim

    yum -y install phpmyadmin

    echo "Setting up MariaDB ..."

    # Setup the MySQL database and set root password to 'password'
    systemctl enable mariadb
    systemctl start mariadb
    mysqladmin -u root password password

    curl -s -o /tmp/entrada.sql https://raw.githubusercontent.com/EntradaProject/entrada-1x-docs/master/resources/vagrant/mysql/entrada.sql
    mysql -uroot -ppassword < /tmp/entrada.sql

    echo "Installing an Apache configuration file..."

    # Download development Apache configuration file from entrada-1x-docs and customize the DocumentRoot
    # NOTE change 'your-university-1x-me' to the name of your entrada git repository under ~/Sites
    # NOTE you may also have to change the apache ports if you have changed the port settings for Vagrant
    curl -s -o /etc/httpd/conf.d/000-entrada.conf https://raw.githubusercontent.com/EntradaProject/entrada-1x-docs/master/resources/vagrant/apache/000-entrada.conf
    curl -s -o /etc/httpd/conf.d/phpMyAdmin.conf https://raw.githubusercontent.com/EntradaProject/entrada-1x-docs/master/resources/vagrant/apache/phpMyAdmin.conf
    # sed -i.bak -e 's/entrada-1x-me/nus-entrada-1x-me/' /etc/httpd/conf.d/entrada.conf

    # Restart Apache
    systemctl enable httpd.service
    systemctl restart httpd.service

    echo "Installing Composer for PHP dependency management..."
    curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer

    echo "Installing capistrano for deployment recipes"
    gem install capistrano -v 2.15.9
    gem install colorize
    gem install sshkit
    gem install gnm-caplock

    echo "All finished. Happy Entrada-ing."
  SHELL2

  # stage 4 - this runs on EVERY boot, to make sure httpd starts (because it depends on the folders being mapped)
  config.vm.provision "shell", run: "always",  inline:  <<-SHELL3
    if [ -f "/etc/httpd/conf.d/000-entrada.conf" ]
    then
      service httpd restart
    fi
  SHELL3
end
